@import "../abstracts/variabale";
// $themeAll: $prime, $second, $third, $fourth;

/*============== Container Props ==============*/
.container {
  max-width: 1800px;
  padding: 0 20px;

  @media screen and (max-width:1900px) and (min-width:1000px) {
    padding: 0 20px;
  }
}

/*============== Responsive Text color Props ==============*/
@each $key,
$value in $themeAll {
  .text-#{$key} {
    color: #{$value} !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {

    @each $key,
    $value in $themeAll {
      .text-#{$size}-#{$key} {
        color: #{$value} !important;
      }
    }
  }
}

/*============== Backgroung color Props ==============*/
@each $key,
$value in $themeAll {
  .bg-#{$key} {
    background-color: #{$value} !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {

    @each $key,
    $value in $themeAll {
      .bg-#{$size}-#{$key} {
        background-color: #{$value} !important;
      }
    }
  }
}

/*============== Border Props ==============*/
/*# Border Color ==============*/
@each $key,
$value in $themeAll {
  .border-#{$key} {
    border-color: #{$value} !important;
  }
}


/*# Border All ==============*/
@each $key,
$value in $themeAll {
  @for $i from 1 through 5 {
    .border-#{$key}-#{$i} {
      border: $value #{$i}px solid !important;
    }
  }
}

/*# Border Angle Wise ==============*/
@each $key,
$value in $themeAll {

  /*# Border color wise ==============*/
  @each $angle in $angles {

    /*#Angle*/
    @for $i from 1 through 5 {
      .border-#{$angle}-#{$key}-#{$i} {
        border-#{$angle}: $value #{$i}px solid !important;
      }
    }
  }
}

/*============== font-wight Props ============*/
@for $i from 1 through 9 {
  .fw-#{$i * 100} {
    font-weight: $i * 100 !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 1 through 9 {
      .fw-#{$size}-#{$i} {
        font-weight: $i * 100 !important;
      }
    }
  }
}

/*============== resposive font-size Props ============ */
@for $i from 1 through 70 {
  .fs-#{$i} {
    font-size: #{$i}px !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 1 through 70 {
      .fs-#{$size}-#{$i} {
        font-size: #{$i}px !important;
      }
    }
  }
}

/*============== responsive width & max-width Props ============ */
@for $i from 1 through 100 {
  .width-#{$i} {
    width: #{$i}px !important;
  }

  .mx-width-#{$i} {
    max-width: #{$i}px !important;
  }

  // ======== % ---------
  .w-#{$i} {
    width: #{$i}#{"%"} !important;
  }

  .mx-w-#{$i} {
    max-width: #{$i}#{"%"} !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 1 through 100 {
      .width-#{$size}-#{$i} {
        width: #{$i}px !important;
      }

      .mx-width-#{$size}-#{$i} {
        max-width: #{$i}px !important;
      }

      // ======== % ---------
      .w-#{$size}-#{$i} {
        width: #{$i}#{"%"} !important;
      }

      .mx-w-#{$size}-#{$i} {
        max-width: #{$i}#{"%"} !important;
      }
    }
  }
}



/*============== responsive height Props ============ */
@for $i from 1 through 1000 {
  .height-#{$i} {
    height: #{$i}px !important;
  }
}

/*============== 0000Props ============ */
@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 1 through 1000 {
      .height-#{$size}-#{$i} {
        height: #{$i}px !important;
      }
    }
  }
}

/*============== responsive width & Height Props ============ */

@for $i from 1 through 500 {
  .hw-#{$i} {
    height: #{$i}px !important;
    width: #{$i}px !important;
    max-height: #{$i}px !important;
    max-width: #{$i}px !important;
    min-height: #{$i}px !important;
    min-width: #{$i}px !important;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 1 through 500 {
      .hw-#{$size}-#{$i} {
        height: #{$i}px !important;
        width: #{$i}px !important;
        max-height: #{$i}px !important;
        max-width: #{$i}px !important;
        min-height: #{$i}px !important;
        min-width: #{$i}px !important;
      }
    }
  }
}



/*============== row-columan Props ============ */
.row {
  --mk-gutter-x: 1.5rem;
  --mk-gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--mk-gutter-y));
  margin-right: calc(-.5 * var(--mk-gutter-x));
  margin-left: calc(-.5 * var(--mk-gutter-x));

  @include maxMediaQuery($md) {
    --mk-gutter-x: 0rem;
  }

  &>* {
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(var(--mk-gutter-x) * .5);
    padding-left: calc(var(--mk-gutter-x) * .5);
    margin-top: var(--mk-gutter-y);
  }

}

@for $i from 12 through 1 {
  $total : calc(100 / 12);

  .col-#{$i} {
    flex: 0 0 auto;
    width: #{$total  * $i}#{"%"};
    margin-bottom: 5px;
  }
}

@each $size,
$value in $responsive {
  @media (min-width: #{$value}px) {
    @for $i from 12 through 1 {
      $total : calc(100 / 12);

      .col-#{$size}-#{$i} {
        flex: 0 0 auto;
        width: #{$total  * $i}#{"%"};
        margin-bottom: 5px;
      }
    }
  }
}

/*============== margin-padding Props ============ */
@mixin margin-padding($length, $class) {
  @if $class ==m {
    .m-auto {
      margin: auto !important;
    }

    .m-auto-right {
      margin-right: auto !important;
    }

    .m-auto-left {
      margin-left: auto !important;
    }
  }

  @for $i from 0 through 40 {
    .#{$class}#{$i} {
      #{$length}: #{$i}px !important;
    }

    @each $angle in $angles {
      .#{$class}#{$i}-#{$angle} {
        #{$length}-#{$angle}: #{$i}px !important;
      }
    }

    .#{$class}#{$i}-y {
      #{$length}-top: #{$i}px !important;
      #{$length}-bottom: #{$i}px !important;
    }

    .#{$class}#{$i}-x {
      #{$length}-left: #{$i}px !important;
      #{$length}-right: #{$i}px !important;
    }
  }

  @each $size,
  $value in $responsive {
    @media (min-width: #{$value}px) {

      @if $class ==m {
        .m-#{$size}-auto {
          margin: auto !important;
        }

        .m-#{$size}-auto-right {
          margin-right: auto !important;
        }

        .m-#{$size}-auto-left {
          margin-left: auto !important;
        }
      }

      @for $i from 0 through 40 {
        .#{$class}#{$i}-#{$size} {
          #{$length}: #{$i}px !important;
        }

        @each $angle in $angles {
          .#{$class}#{$i}-#{$size}-#{$angle} {
            #{$length}-#{$angle}: #{$i}px !important;
          }
        }

        .#{$class}#{$i}-#{$size}-y {
          #{$length}-top: #{$i}px !important;
          #{$length}-bottom: #{$i}px !important;
        }

        .#{$class}#{$i}-#{$size}-x {
          #{$length}-left: #{$i}px !important;
          #{$length}-right: #{$i}px !important;
        }
      }
    }
  }


}

/*============== Padding ============ */
@include margin-padding(padding, p);

/*============== Margin ============ */
@include margin-padding(margin, m);

dl,
ol,
ul,
p {
  margin-top: 0;
  margin-bottom: 0;
}

ol,
ul {
  padding-left: 0;
}

/*============== skeleton ============ */
.skeleton {
  background-color: #e2e5e7;
  // The shine that's going to move across the skeleton:
  background-image:
    linear-gradient(90deg,
      rgba(#fff, 0),
      rgba(#fff, 0.5),
      rgba(#fff, 0));
  background-size: 40px 100%;
  background-repeat: no-repeat;
  background-position: left -40px top 0;
  animation: shine 1s ease infinite;
}

@keyframes shine {
  to {
    background-position: right -40px top 0;
  }
}

.noData {
  height: 100%;
  width: 600px;
  object-fit: cover;
  margin: auto;
  padding: 100px 0;
}

.text-overflow-1 {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

/* ================ Toast PROPS =============== */


.Toastify {
  & .Toastify__toast-theme--light {
    background: $dark;
    color: $light;
  }

  & .Toastify__close-button.Toastify__close-button--light {
    color: $light !important;
  }

  & .Toastify__progress-bar {
    background-color: transparent;
  }

  & .Toastify__toast-icon.Toastify--animate-icon.Toastify__zoom-enter~div {
    font-size: 14px;
  }

  & .Toastify__toast {
    min-height: 35px;
  }


  @include maxMediaQuery($sm) {
    & .Toastify__toast-container {
      width: 250px;
      top: 1em;
      left: 50%;
      transform: translateX(-50%);
    }

    & .Toastify__toast-icon.Toastify--animate-icon.Toastify__zoom-enter~div {
      font-size: 10px;
    }

    & .Toastify__toast-icon {
      width: 15px;
    }
  }

}

/* Add to cart 3 round loader */

.cartLoader {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: block;
  margin: auto;
  position: relative;
  background: #FFF;
  box-shadow: -24px 0 #FFF, 24px 0 #FFF;
  box-sizing: border-box;
  animation: shadowPulse .6s linear infinite;
}

@keyframes shadowPulse {
  33% {
    background: #FFF;
    box-shadow: -24px 0 #969696, 24px 0 #FFF;
  }

  66% {
    background: #969696;
    box-shadow: -24px 0 #FFF, 24px 0 #FFF;
  }

  100% {
    background: #FFF;
    box-shadow: -24px 0 #FFF, 24px 0 #969696;
  }
}

.primeButton button {
  width: 100%;
  background-color: #A86464;
  color: #ffffff;
  border: none;
  padding: 5px 0;
  cursor: pointer;
  border-radius: 4px;
}


